% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getPhotoSearch.R
\name{getPhotoSearch}
\alias{getPhotoSearch}
\alias{get_photo_search}
\title{Search for photos on Flickr by user id, tags, license, or bounding box}
\usage{
getPhotoSearch(
  api_key = NULL,
  user_id = NULL,
  tags = NULL,
  license_id = NULL,
  sort = "date-posted",
  desc = FALSE,
  bbox = NULL,
  img_size = NULL,
  date = NULL,
  upload_date = NULL,
  extras = NULL,
  per_page = 100,
  page = NULL,
  ...
)

get_photo_search(
  api_key = NULL,
  user_id = NULL,
  tags = NULL,
  license_id = NULL,
  sort = "date-posted",
  desc = FALSE,
  bbox = NULL,
  img_size = NULL,
  date = NULL,
  upload_date = NULL,
  extras = NULL,
  per_page = 100,
  page = NULL,
  ...
)
}
\arguments{
\item{api_key}{Flickr API key. If api_key is \code{NULL}, the function uses
\code{\link[=getFlickrAPIKey]{getFlickrAPIKey()}} to use the environment variable "FLICKR_API_KEY" as the
key.}

\item{user_id}{The NSID of the user with photos to search. If this parameter
is \code{NULL} passed then all public photos will be searched.}

\item{tags}{A vector of tags to search for.}

\item{license_id}{The license id for photos. For possible values, see the
Flickr API method
\href{https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html}{flickr.photos.licenses.getInfo}
or see details for more information. If license_id is provided, "license"
is added to extras.}

\item{sort}{Order to sort returned photos. The possible values are:
"date-posted-asc", "date-posted-desc", "date-taken-asc", "date-taken-desc",
"interestingness-desc", "interestingness-asc", and "relevance" The trailing
"-asc" or "-desc" indicator for sort direction is optional when using the
desc parameter.}

\item{desc}{If \code{TRUE}, sort in descending order by the selected sort
variable; defaults to \code{FALSE}.}

\item{bbox}{A object of class \code{bbox} or a numeric vector with values for
xmin, ymin, xmax and ymax representing the bottom-left corner of the box
and the top-right corner.}

\item{img_size}{A character string with the abbreviation for one or more
image sizes ("sq", "t", "s", "q", "m", "n", "z", "c", "l", or "o"). If a
single img_size is provided the url, width, and height columns are renamed
(e.g. img_url instead of url_sq) and an img_asp column is added to the
results; defaults to \code{NULL}.}

\item{date}{Date taken in any format supported by \code{\link[=as.POSIXlt]{as.POSIXlt()}}. If date is
a length 1 vector, it is treated as a minimum date taken with the maximum
set one day later. If date has a length greater than 1, the minimum and
maximum date from the vector are used.  If date is provided,
"date_taken" is added to extras.}

\item{upload_date}{Date uploaded in any format supported by \code{\link[=as.POSIXlt]{as.POSIXlt()}}.
If upload_date is a length 1 vector, it is treated as a minimum date
uploaded with the maximum set one day later. If date has a length greater
than 1, the minimum and maximum date from the vector are used.  If date is
provided, "date_upload" is added to extras.}

\item{extras}{A vector of extra information to fetch for each returned
record. Currently supported fields are: c("description", "license",
"date_upload", "date_taken", "owner_name", "icon_server",
"original_format", "last_update", "geo", "tags", "machine_tags", "o_dims",
"views", "media", "path_alias", "url_sq", "url_t", "url_s", "url_q",
"url_m", "url_n", "url_z", "url_c", "url_l", "url_o")}

\item{per_page}{Number specifying how many results per page to return.
Default 100 results per page. Maximum of 250 if \code{bbox} provided or 500
otherwise.}

\item{page}{Number specifying which search results page to return. Default is
page 1 of results returned.}

\item{...}{Dots can be used to pass any additional arguments supported by the
\href{https://www.flickr.com/services/api/flickr.photos.search.html}{flickr.photos.search}
API method excluding license, min_taken_date, max_taken_date,
min_upload_date, and max_upload_date which are supported by other named
parameters. Dots also support two legacy parameters: licence_id (variant
spelling for license_id) and geo (set \code{geo = TRUE} to include "geo" in
extras).}
}
\value{
This function returns data of specific photos matching search
parameters.
}
\description{
Use the Flickr Search API to return pages of photos sorted by date posted,
date taken, interestingness, and relevance. Optional search parameters
including spatial bounding box, user id, tags, and image license.
}
\details{
License id options:

license_id can be an integer from 0 to 10 or a corresponding license code
including:
\itemize{
\item "c" (All Rights Reserved),
\item "by-bc-sa" (Attribution-NonCommercial-ShareAlike),
\item "by-nc" (Attribution-NonCommercial),
\item "by-nc-nd" (Attribution-NonCommercial-NoDerivs),
\item "by" (Attribution),
\item "by-sa" (Attribution-ShareAlike),
\item "by-nd" (Attribution-NoDerivs),
\item "nkc" (No known copyright restrictions),
\item "pd-us" (United States Government Work),
\item "cc0" (Public Domain Dedication),
\item or "pd" (Public Domain Mark).
}
}
\examples{
\dontrun{
# Search for photos tagged "cats" and "dogs"
# Return images in descending order of date taken
getPhotoSearch(
  api_key = get_flickr_api_key(),
  sort = "date-taken-desc",
  tags = c("cats", "dogs")
)
}
\dontrun{
# Search for photos uploaded to the NPS Grand Canyon user account.
# Return extra fields including the date taken and square image URL.
getPhotoSearch(
  api_key = get_flickr_api_key(),
  user_id = "grand_canyon_nps",
  extras = c("date_taken", "url_sq")
)
}
\dontrun{
# Search for photos tagged "panda" in the area of Ueno Zoo, Tokyo, Japan
getPhotoSearch(
  api_key = get_flickr_api_key(),
  tags = "panda",
  bbox = c(139.7682226529, 35.712627977, 139.7724605432, 35.7181464141),
  extras = c("geo", "owner_name", "tags")
)
}
}
\seealso{
\itemize{
\item Flickr API Documentation: \href{https://www.flickr.com/services/api/flickr.photos.search.html}{flickr.photos.search}
}
}
